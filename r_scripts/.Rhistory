x.vec <- strsplit(text,split = " ")
letter.l <- strsplit(unlist(x.vec),split = "")
indices.l <- lapply(letter.l,function(x) match(x,letters))
if (de_encrypt) {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l + shift)
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 26)
return.l <- lapply(indices_normalised.l,function (indices_normalised.l) letters[indices_normalised.l])
} else {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l - shift)
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 26)
return.l <- lapply(indices_normalised.l,function(indices_normalised.l) letters[indices_normalised.l])
}
return.l <- lapply(return.l,function(return.l) paste(return.l,collapse = ""))
return.l <- lapply(return.l,function(return.l) paste(return.l," "))
return(trimws(paste(unlist(return.l),collapse = ""),which = "right"))
}
# example encrypt
ceaser_shift.func("hello my name is",5,F)
ceaser_shift.func("the quick brown fox jumps over the lazy",5,F)
# example de_encrypt
ceaser_shift.func("cggj  ht  ivh  dn",5,T)
ceaser_shift.func("oc  lpdxf  wmjri  ajs  ephkn  jqm  oc  gvut",5,T)
text <- "hello my name is"
x.vec <- strsplit(text,split = " ")
letter.l <- strsplit(unlist(x.vec),split = "")
indices.l <- lapply(letter.l,function(x) match(x,letters))
shift = 5
de_encrypt = F
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l - shift)
indices_shifted.l
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 26)
indices_normalised.l
# function only works for alpha numerics, and converts everything to lowercase first
ceaser_shift.func <- function(text,shift = 5,de_encrypt = F) {
# round(runif(1,0,10),0)
if (!is.atomic(text) | !is.character(text)) {
stop("Please supply a character vector!")
}
text <- tolower(text)
x.vec <- strsplit(text,split = " ")
letter.l <- strsplit(unlist(x.vec),split = "")
indices.l <- lapply(letter.l,function(x) match(x,letters))
if (de_encrypt) {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l - (shift+1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 26) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) letters[indices_non_zero.l])
} else {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l + (shift-1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 26) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) letters[indices_non_zero.l])
}
return.l <- lapply(return.l,function(return.l) paste(return.l,collapse = ""))
return.l <- lapply(return.l,function(return.l) paste(return.l," "))
return(trimws(paste(unlist(return.l),collapse = ""),which = "right"))
}
# example encrypt
ceaser_shift.func("hello my name is",5,F)
ceaser_shift.func("the quick brown fox jumps over the lazy",5,F)
# example de_encrypt
ceaser_shift.func("cggj  ht  ivh  dn",5,T)
ceaser_shift.func("oc  lpdxf  wmjri  ajs  ephkn  jqm  oc  gvut",5,T)
# function only works for alpha numerics, and converts everything to lowercase first
ceaser_shift.func <- function(text,shift = 5,de_encrypt = F) {
# round(runif(1,0,10),0)
if (!is.atomic(text) | !is.character(text)) {
stop("Please supply a character vector!")
}
text <- tolower(text)
x.vec <- strsplit(text,split = " ")
letter.l <- strsplit(unlist(x.vec),split = "")
indices.l <- lapply(letter.l,function(x) match(x,letters))
if (de_encrypt) {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l - (shift+1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 26) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) letters[indices_non_zero.l])
} else {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l + (shift-1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 26) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) letters[indices_non_zero.l])
}
return.l <- lapply(return.l,function(return.l) paste(return.l,collapse = ""))
return.l <- lapply(return.l,function(return.l) paste(return.l," "))
return(trimws(paste(unlist(return.l),collapse = ""),which = "right"))
}
# example encrypt
ceaser_shift.func("hello my name is",5,F)
ceaser_shift.func("the quick brown fox jumps over the lazy",5,F)
# example de_encrypt
ceaser_shift.func(ceaser_shift.func("hello my name is",5,F),5,T)
ceaser_shift.func(ceaser_shift.func("the quick brown fox jumps over the lazy",5,F),5,T)
ceaser_shift.func("I love you very much, Renata Sawyer",5,F)
# function only works for alpha numerics, and converts everything to lowercase first
caeser_shift.func <- function(text,shift = 5,de_encrypt = F) {
# round(runif(1,0,10),0)
if (!is.atomic(text) | !is.character(text)) {
stop("Please supply a character vector!")
}
text <- tolower(text)
x.vec <- strsplit(text,split = " ")
letter.l <- strsplit(unlist(x.vec),split = "")
indices.l <- lapply(letter.l,function(x) match(x,letters))
if (de_encrypt) {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l - (shift+1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 26) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) letters[indices_non_zero.l])
} else {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l + (shift-1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 26) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) letters[indices_non_zero.l])
}
return.l <- lapply(return.l,function(return.l) paste(return.l,collapse = ""))
return.l <- lapply(return.l,function(return.l) paste(return.l," "))
return(trimws(paste(unlist(return.l),collapse = ""),which = "right"))
}
# example encrypt
caeser_shift.func("hello my name is",5,F)
caeser_shift.func("the quick brown fox jumps over the lazy",5,F)
# example de_encrypt
caeser_shift.func(caeser_shift.func("hello my name is",5,F),5,T)
caeser_shift.func(caeser_shift.func("the quick brown fox jumps over the lazy",5,F),5,T)
unicode
LETTERS
# function only works for characters (no punctuation other than spaces), and converts everything to lowercase first
caeser_shift.func <- function(text,shift = 5,de_encrypt = F) {
# round(runif(1,0,10),0)
if (!is.atomic(text) | !is.character(text)) {
stop("Please supply a character vector!")
}
characters <- c(letters,LETTERS)
text <- tolower(text)
x.vec <- strsplit(text,split = " ")
letter.l <- strsplit(unlist(x.vec),split = "")
indices.l <- lapply(letter.l,function(x) match(x,characters))
if (de_encrypt) {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l - (shift+1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 52) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) characters[indices_non_zero.l])
} else {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l + (shift-1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 52) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) characters[indices_non_zero.l])
}
return.l <- lapply(return.l,function(return.l) paste(return.l,collapse = ""))
return.l <- lapply(return.l,function(return.l) paste(return.l," "))
return(trimws(paste(unlist(return.l),collapse = ""),which = "right"))
}
# example encrypt
caeser_shift.func("hello my name is",5,F)
caeser_shift.func("the quick brown fox jumps over the lazy",5,F)
# example de_encrypt
caeser_shift.func(caeser_shift.func("hello my name is",5,F),5,T)
caeser_shift.func(caeser_shift.func("the quick brown fox jumps over the lazy",5,F),5,T)
characters <- c(letters,LETTERS)
length(characters)
text <- "quick brown"
x.vec <- strsplit(text,split = " ")
letter.l <- strsplit(unlist(x.vec),split = "")
indices.l <- lapply(letter.l,function(x) match(x,characters))
indices.l
shift = 5
de_encrypt = F
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l - (shift+1)) # due to +1 later
indices_shifted.l
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 52)
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1)
indices_non_zero.l
caeser_shift.func("hello my name is",5,F)
caeser_shift.func("the quick brown fox jumps over the lazy",5,F)
caeser_shift.func(caeser_shift.func("hello my name is",5,F),5,T)
caeser_shift.func(caeser_shift.func("the quick brown fox jumps over the lazy",5,F),5,T)
# function only works for characters (no punctuation other than spaces), and converts everything to lowercase first
caeser_shift.func <- function(text,shift = 5,de_encrypt = F) {
# round(runif(1,0,10),0)
if (!is.atomic(text) | !is.character(text)) {
stop("Please supply a character vector!")
}
characters <- c(letters,LETTERS)
#text <- tolower(text)
x.vec <- strsplit(text,split = " ")
letter.l <- strsplit(unlist(x.vec),split = "")
indices.l <- lapply(letter.l,function(x) match(x,characters))
if (de_encrypt) {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l - (shift+1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 52) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) characters[indices_non_zero.l])
} else {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l + (shift-1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 52) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) characters[indices_non_zero.l])
}
return.l <- lapply(return.l,function(return.l) paste(return.l,collapse = ""))
return.l <- lapply(return.l,function(return.l) paste(return.l," "))
return(trimws(paste(unlist(return.l),collapse = ""),which = "right"))
}
# example encrypt
caeser_shift.func("hello my name is",5,F)
caeser_shift.func("the quick brown fox jumps over the lazy",5,F)
# example de_encrypt
caeser_shift.func(caeser_shift.func("hello my name is",5,F),5,T)
caeser_shift.func(caeser_shift.func("the quick brown fox jumps over the lazy",5,F),5,T)
caeser_shift.func <- function(text,shift = 5,de_encrypt = F) {
# round(runif(1,0,10),0)
if (!is.atomic(text) | !is.character(text)) {
stop("Please supply a character vector!")
}
characters <- c(letters,LETTERS)
#text <- tolower(text)
x.vec <- strsplit(text,split = " ")
letter.l <- strsplit(unlist(x.vec),split = "")
indices.l <- lapply(letter.l,function(x) match(x,characters))
if (de_encrypt) {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l - (shift+1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 52) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) characters[indices_non_zero.l])
} else {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l + (shift-1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 52) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) characters[indices_non_zero.l])
}
return.l <- lapply(return.l,function(return.l) paste(return.l,collapse = ""))
return.l <- lapply(return.l,function(return.l) paste(return.l," "))
return(trimws(paste(unlist(return.l),collapse = ""),which = "right"))
}
# example encrypt
caeser_shift.func("hello my name is",5,F)
caeser_shift.func("the quick brown fox jumps over the lazy",5,F)
# example de_encrypt
caeser_shift.func(caeser_shift.func("hello my name is",5,F),5,T)
caeser_shift.func(caeser_shift.func("the quick brown fox jumps over the lazy",5,F),5,T)
caeser_shift.func("Hello world")
caeser_shift.func("Mjqqt  Btwqi",T)
caeser_shift.func("Mjqqt  Btwqi",F)
caeser_shift.func("Mjqqt  Btwqi",T)
# function only works for characters (no punctuation other than spaces), and converts everything to lowercase first
caeser_shift.func <- function(text,shift = 5,de_encrypt = F) {
# round(runif(1,0,10),0)
if (!is.atomic(text) | !is.character(text)) {
stop("Please supply a character vector!")
}
characters <- c(letters,LETTERS)
#text <- tolower(text)
x.vec <- strsplit(text,split = " ")
letter.l <- strsplit(unlist(x.vec),split = "")
indices.l <- lapply(letter.l,function(x) match(x,characters))
if (de_encrypt) {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l - (shift+1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 52) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) characters[indices_non_zero.l])
} else {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l + (shift-1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 52) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) characters[indices_non_zero.l])
}
return.l <- lapply(return.l,function(return.l) paste(return.l,collapse = ""))
return.l <- lapply(return.l,function(return.l) paste(return.l," "))
return(trimws(paste(unlist(return.l),collapse = ""),which = "right"))
}
# example encrypt
caeser_shift.func("hello my name is",5,F)
caeser_shift.func("the quick brown fox jumps over the lazy",5,F)
# example de_encrypt
caeser_shift.func(caeser_shift.func("Hello my name is",5,F),5,T)
caeser_shift.func(caeser_shift.func("The quick brown fox jumps over the lazy",5,F),5,T)
# function only works for characters (no punctuation other than spaces), and converts everything to lowercase first
caeser_shift.func <- function(text,shift = 5,de_encrypt = F) {
# round(runif(1,0,10),0)
if (!is.atomic(text) | !is.character(text)) {
stop("Please supply a character vector!")
}
characters <- c(letters,LETTERS)
#text <- tolower(text)
x.vec <- strsplit(text,split = " ")
letter.l <- strsplit(unlist(x.vec),split = "")
indices.l <- lapply(letter.l,function(x) match(x,characters))
if (de_encrypt) {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l - (shift+1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 52) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) characters[indices_non_zero.l])
} else {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l + (shift-1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 52) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) characters[indices_non_zero.l])
}
return.l <- lapply(return.l,function(return.l) paste(return.l,collapse = ""))
return.l <- lapply(return.l,function(return.l) paste(return.l," "))
return(trimws(paste(unlist(return.l),collapse = ""),which = "right"))
}
# example encrypt
caeser_shift.func("hello my name is",5,F)
caeser_shift.func("the quick brown fox jumps over the lazy",5,F)
# example de_encrypt
caeser_shift.func(caeser_shift.func("Hello my name is",5,F),5,T)
caeser_shift.func(caeser_shift.func("The quick brown fox Jumps OVER the lazy",5,F),5,T)
caeser_shift.func("ymj  vznhp  gwtBs  ktC  ozrux  tAjw  ymj  qfED",5,T)
caeser_shift.func("The quick brown fox Jumps OVER the lazy",5,F)
caeser_shift.func("Ymj  vznhp  gwtBs  ktC  Ozrux  TaJW  ymj  qfED",5,T)
# updated: works for unicode character set (needs to be in wd)
# function only works for characters (no punctuation other than spaces), and converts everything to lowercase first
caeser_shift.func <- function(text,shift = 5,de_encrypt = F) {
# round(runif(1,0,10),0)
if (!is.atomic(text) | !is.character(text)) {
stop("Please supply a character string!")
}
characters <- c(letters,LETTERS)
#text <- tolower(text)
x.vec <- strsplit(text,split = " ")
letter.l <- strsplit(unlist(x.vec),split = "")
indices.l <- lapply(letter.l,function(x) match(x,characters))
if (de_encrypt) {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l - (shift+1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 52) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) characters[indices_non_zero.l])
} else {
indices_shifted.l <- lapply(indices.l,function(indices.l) indices.l + (shift-1)) # due to +1 later
indices_normalised.l <- lapply(indices_shifted.l,function(indices_shifted.l) indices_shifted.l %% 52) # accounts for index shifts outside 1-26
indices_non_zero.l <- lapply(indices_normalised.l,function(indices_normalised.l) indices_normalised.l + 1) # removes zero values, which break indexing
return.l <- lapply(indices_non_zero.l,function(indices_non_zero.l) characters[indices_non_zero.l])
}
return.l <- lapply(return.l,function(return.l) paste(return.l,collapse = ""))
return.l <- lapply(return.l,function(return.l) paste(return.l," "))
return(trimws(paste(unlist(return.l),collapse = ""),which = "right"))
}
# example encrypt
caeser_shift.func("hello my name is",5,F)
caeser_shift.func("the quick brown fox jumps over the lazy",5,F)
# example de_encrypt
caeser_shift.func(caeser_shift.func("Hello my name is",5,F),5,T)
caeser_shift.func(caeser_shift.func("The quick brown fox jumps over the lazy",5,F),5,T)
library(dplyr)
df <- mutate_all(as.data.frame(letters), .funs=toupper)
nucleotides <- df[c(1,3,7,20),]
strings<- as.character(sample(nucleotides,4*50*10^5,replace = T))
test.mat <- matrix(data = strings,nrow = 10^5)
test.df <- as.data.frame(test.mat)
#sapply(test.mat[1,],)
test_4.df <-
data.frame('1' = apply(test.mat[,c(1:50)],FUN = paste,MARGIN = 1,collapse = "") ,
'2' = apply(test.mat[,c(51:100)],FUN = paste,MARGIN = 1,collapse = "") ,
'3' = apply(test.mat[,c(101:150)],FUN = paste,MARGIN = 1,collapse = "") ,
'4' = apply(test.mat[,c(151:200)],FUN = paste,MARGIN = 1,collapse = "") )
write.table(test_4.df,file = "pete_test_data",row.names = F,col.names = F)
test_4.df
100
mt.mat <- matrix(ncol = 9,nrow = 100)
for (i in 1:100) {
#mt.mat[i,] <- runif(9,0,100)
mt.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_nine.vec <- apply(mt.mat,1,mean)
mt_2.mat <- matrix(ncol = 50,nrow = 100)
for (i in 1:100) {
#mt_2.mat[i,] <- runif(50,0,100)
mt_2.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_fifty.vec <- apply(mt_2.mat,1,mean)
par(mfrow = c(1,3))
hist(means_nine.vec,xlim = c(0,100),col = 'blue',main = "Distribution of Sampling Mean \n Sampling with sample size = 9 \n 100 Samples",xlab = "Value of Means")
hist(means_fifty.vec,xlim = c(0,100),col = 'red', main = "Distribution of Sampling Mean \n Sampling with sample size = 36 \n 100 Samples",xlab = "Values of Means")
unif.vec <- runif(10^6,0,100)
hist(unif.vec,xlim = c(0,100),col = 'red', main = "Distribution of Data we are Sampling from \n (Uniform Distribution) \n n = 10^6",xlab = "Values of Data")
mt.mat <- matrix(ncol = 9,nrow = 100)
for (i in 1:100) {
#mt.mat[i,] <- runif(9,0,100)
mt.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_nine.vec <- apply(mt.mat,1,mean)
mt_2.mat <- matrix(ncol = 50,nrow = 100)
for (i in 1:100) {
#mt_2.mat[i,] <- runif(50,0,100)
mt_2.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_fifty.vec <- apply(mt_2.mat,1,mean)
par(mfrow = c(1,3))
hist(means_nine.vec,xlim = c(0,100),col = 'blue',main = "Distribution of Sampling Mean \n Sampling with sample size = 9 \n 100 Samples",xlab = "Value of Means")
hist(means_fifty.vec,xlim = c(0,100),col = 'red', main = "Distribution of Sampling Mean \n Sampling with sample size = 36 \n 100 Samples",xlab = "Values of Means")
unif.vec <- runif(10^6,0,100)
hist(unif.vec,xlim = c(0,100),col = 'red', main = "Distribution of Data we are Sampling from \n (Uniform Distribution) \n n = 10^6",xlab = "Values of Data")
hist(means_nine.vec,xlim = c(0,100),col = 'blue',main = "Distribution of Sampling Mean \n Sampling with sample size = 9 \n 100 Samples",xlab = "Value of Means")
hist(means_fifty.vec,xlim = c(0,100),col = 'red', main = "Distribution of Sampling Mean \n Sampling with sample size = 36 \n 100 Samples",xlab = "Values of Means")
hist(unif.vec,xlim = c(0,100),col = 'red', main = "Distribution of Data we are Sampling from \n (Uniform Distribution) \n n = 10^6",xlab = "Values of Data")
par(mfrow = c(1,3))
hist(means_nine.vec,xlim = c(0,100),col = 'blue',main = "Distribution of Sampling Mean \n Sampling with sample size = 9 \n 100 Samples",xlab = "Value of Means")
hist(means_fifty.vec,xlim = c(0,100),col = 'red', main = "Distribution of Sampling Mean \n Sampling with sample size = 36 \n 100 Samples",xlab = "Values of Means")
hist(unif.vec,xlim = c(0,100),col = 'red', main = "Distribution of Data we are Sampling from \n (Uniform Distribution) \n n = 10^6",xlab = "Values of Data")
par(mfrow = c(1,3))
hist(means_nine.vec,xlim = c(0,100),col = 'blue',main = "Distribution of Sampling Mean \n Sampling with sample size = 9 \n 100 Samples",xlab = "Value of Means",breaks = 30)
hist(means_fifty.vec,xlim = c(0,100),col = 'red', main = "Distribution of Sampling Mean \n Sampling with sample size = 36 \n 100 Samples",xlab = "Values of Means",breaks = 30)
hist(unif.vec,xlim = c(0,100),col = 'red', main = "Distribution of Data we are Sampling from \n (Uniform Distribution) \n n = 10^6",xlab = "Values of Data",breaks = 30)
mt.mat <- matrix(ncol = 9,nrow = 100)
for (i in 1:100) {
#mt.mat[i,] <- runif(9,0,100)
mt.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_nine.vec <- apply(mt.mat,1,mean)
mt_2.mat <- matrix(ncol = 50,nrow = 100)
for (i in 1:100) {
#mt_2.mat[i,] <- runif(50,0,100)
mt_2.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_fifty.vec <- apply(mt_2.mat,1,mean)
unif.vec <- runif(10^6,0,100)
mt.mat <- matrix(ncol = 9,nrow = 100)
for (i in 1:100) {
#mt.mat[i,] <- runif(9,0,100)
mt.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_nine.vec <- apply(mt.mat,1,mean)
mt_2.mat <- matrix(ncol = 50,nrow = 100)
for (i in 1:100) {
mt_2.mat[i,] <- runif(50,0,100)
#mt_2.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_fifty.vec <- apply(mt_2.mat,1,mean)
unif.vec <- runif(10^6,0,100)
par(mfrow = c(1,3))
hist(means_nine.vec,xlim = c(0,100),col = 'blue',main = "Distribution of Sampling Mean \n Sampling with sample size = 9 \n 100 Samples",xlab = "Value of Means",breaks = 30)
hist(means_fifty.vec,xlim = c(0,100),col = 'red', main = "Distribution of Sampling Mean \n Sampling with sample size = 36 \n 100 Samples",xlab = "Values of Means",breaks = 30)
hist(unif.vec,xlim = c(0,100),col = 'red', main = "Distribution of Data we are Sampling from \n (Uniform Distribution) \n n = 10^6",xlab = "Values of Data",breaks = 30)
means_fifty.vec <- apply(mt_2.mat,1,mean)
unif.vec <- runif(10^6,0,100)
par(mfrow = c(1,3))
hist(means_nine.vec,xlim = c(0,100),col = 'blue',main = "Distribution of Sampling Mean \n Sampling with sample size = 9 \n 100 Samples",xlab = "Value of Means",breaks = 30)
hist(means_fifty.vec,xlim = c(0,100),col = 'red', main = "Distribution of Sampling Mean \n Sampling with sample size = 36 \n 100 Samples",xlab = "Values of Means",breaks = 30)
hist(unif.vec,xlim = c(0,100),col = 'red', main = "Distribution of Data we are Sampling from \n (Uniform Distribution) \n n = 10^6",xlab = "Values of Data",breaks = 30)
x11()
mt.mat <- matrix(ncol = 9,nrow = 100)
for (i in 1:100) {
mt.mat[i,] <- runif(9,0,100)
#mt.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_nine.vec <- apply(mt.mat,1,mean)
mt_2.mat <- matrix(ncol = 50,nrow = 100)
for (i in 1:100) {
mt_2.mat[i,] <- runif(50,0,100)
#mt_2.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_fifty.vec <- apply(mt_2.mat,1,mean)
unif.vec <- runif(10^6,0,100)
par(mfrow = c(1,3))
hist(means_nine.vec,xlim = c(0,100),col = 'blue',main = "Distribution of Sampling Mean \n Sampling with sample size = 9 \n 100 Samples",xlab = "Value of Means",breaks = 30)
hist(means_fifty.vec,xlim = c(0,100),col = 'red', main = "Distribution of Sampling Mean \n Sampling with sample size = 36 \n 100 Samples",xlab = "Values of Means",breaks = 30)
hist(unif.vec,xlim = c(0,100),col = 'red', main = "Distribution of Data we are Sampling from \n (Uniform Distribution) \n n = 10^6",xlab = "Values of Data",breaks = 30)
x11()
mt.mat <- matrix(ncol = 9,nrow = 100)
for (i in 1:100) {
mt.mat[i,] <- runif(9,0,100)
#mt.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_nine.vec <- apply(mt.mat,1,mean)
mt_2.mat <- matrix(ncol = 50,nrow = 100)
for (i in 1:100) {
mt_2.mat[i,] <- runif(50,0,100)
#mt_2.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_fifty.vec <- apply(mt_2.mat,1,mean)
unif.vec <- runif(10^6,0,100)
par(mfrow = c(1,3))
hist(means_nine.vec,xlim = c(0,100),col = 'blue',main = "Distribution of Sampling Mean \n Sampling with sample size = 9 \n 100 Samples",xlab = "Value of Means",breaks = 30)
hist(means_fifty.vec,xlim = c(0,100),col = 'red', main = "Distribution of Sampling Mean \n Sampling with sample size = 36 \n 100 Samples",xlab = "Values of Means",breaks = 30)
hist(unif.vec,xlim = c(0,100),col = 'red', main = "Distribution of Data we are Sampling from \n (Uniform Distribution) \n n = 10^6",xlab = "Values of Data",breaks = 30)
mt.mat <- matrix(ncol = 9,nrow = 100)
for (i in 1:100000) {
mt.mat[i,] <- runif(9,0,100)
#mt.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_nine.vec <- apply(mt.mat,1,mean)
mt_2.mat <- matrix(ncol = 50,nrow = 100)
for (i in 1:100000) {
mt_2.mat[i,] <- runif(50,0,100)
#mt_2.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_fifty.vec <- apply(mt_2.mat,1,mean)
unif.vec <- runif(10^6,0,100)
par(mfrow = c(1,3))
hist(means_nine.vec,xlim = c(0,100),col = 'blue',main = "Distribution of Sampling Mean \n Sampling with sample size = 9 \n 100 Samples",xlab = "Value of Means",breaks = 30)
hist(means_fifty.vec,xlim = c(0,100),col = 'red', main = "Distribution of Sampling Mean \n Sampling with sample size = 36 \n 100 Samples",xlab = "Values of Means",breaks = 30)
hist(unif.vec,xlim = c(0,100),col = 'red', main = "Distribution of Data we are Sampling from \n (Uniform Distribution) \n n = 10^6",xlab = "Values of Data",breaks = 30)
x11()
mt.mat <- matrix(ncol = 9,nrow = 100)
for (i in 1:100000) {
mt.mat[i,] <- runif(9,0,100)
#mt.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_nine.vec <- apply(mt.mat,1,mean)
mt_2.mat <- matrix(ncol = 50,nrow = 100)
for (i in 1:100000) {
mt_2.mat[i,] <- runif(50,0,100)
#mt_2.mat[i,] <- rpois(7,100)
}#random sampling from 0-100
means_fifty.vec <- apply(mt_2.mat,1,mean)
unif.vec <- runif(10^6,0,100)
par(mfrow = c(1,3))
hist(means_nine.vec,xlim = c(0,100),col = 'blue',main = "Distribution of Sampling Mean \n Sampling with sample size = 9 \n 100 Samples",xlab = "Value of Means",breaks = 30)
hist(means_fifty.vec,xlim = c(0,100),col = 'red', main = "Distribution of Sampling Mean \n Sampling with sample size = 36 \n 100 Samples",xlab = "Values of Means",breaks = 30)
hist(unif.vec,xlim = c(0,100),col = 'red', main = "Distribution of Data we are Sampling from \n (Uniform Distribution) \n n = 10^6",xlab = "Values of Data",breaks = 30)
