library("rayshader")
library("raster")
library("gdalUtils")
#data from https://data.linz.govt.nz/layer/53621-wellington-lidar-1m-dem-2013/
#cropped to central wellington area to meet download limit of 2.5 GB

setwd(choose.dir()) # switch directory to tiff files

gdalbuildvrt(gdalfile = "*.tif", # uses all tiffs in the current folder
						 output.vrt = "dem.vrt")

gdal_translate(src_dataset = "dem.vrt", 
							 dst_dataset = "dem.tif", 
							 output_Raster = TRUE, # returns the raster as Raster*Object
							 # if TRUE, you should consider to assign 
							 # the whole function to an object like dem <- gddal_tr..
							 options = c("BIGTIFF=YES", "COMPRESSION=LZW"))

localtif = raster("dem.tif")

elmat = matrix(raster::extract(localtif, raster::extent(localtif), buffer = 1000),
							 nrow = ncol(localtif), ncol = nrow(localtif))

ambmat = ambient_shade(elmat)

elmat %>%
	sphere_shade(texture = "imhof2") %>%
	#add_water(detect_water(elmat), color = "imhof2") %>%
	add_shadow(ray_shade(elmat, zscale = 3, maxsearch = 300), 0.5) %>%
	add_shadow(ambmat, 0.5) %>%
	plot_3d(elmat, zscale = 5, fov = 0, theta = 135, zoom = 0.75, phi = 45, windowsize = c(1920, 1080))
render_snapshot("mt_t")

# 3d gif

save_3d_gif <- function(hillshade, heightmap, file, duration = 5, ...) {
	require(rayshader)
	require(magick)
	require(rgl)
	require(gifski)
	require(rlang)
	
	# capture dot arguments and extract variables with length > 1 for gif frames
	dots <- rlang::list2(...)
	var_exception_list <- c("windowsize")
	dot_var_lengths <- purrr::map_int(dots, length)
	gif_var_names <- names(dots)[dot_var_lengths > 1 & 
															 	!(names(dots) %in% var_exception_list)]
	# split off dot variables to use on gif frames
	gif_dots <- dots[gif_var_names]
	static_dots <- dots[!(names(dots) %in% gif_var_names)]
	gif_var_lengths <- purrr::map_int(gif_dots, length)
	# build expressions for gif variables that include index 'i' (to use in the for loop)
	gif_expr_list <- purrr::map(names(gif_dots), ~rlang::expr(gif_dots[[!!.x]][i]))
	gif_exprs <- exprs(!!!gif_expr_list)
	names(gif_exprs) <- names(gif_dots)
	message(paste("gif variables found:", paste(names(gif_dots), collapse = ", ")))
	
	# TODO - can we recycle short vectors?
	if (length(unique(gif_var_lengths)) > 1) 
		stop("all gif input vectors must be the same length")
	n_frames <- unique(gif_var_lengths)
	
	# generate temp .png images
	temp_dir <- tempdir()
	img_frames <- file.path(temp_dir, paste0("frame-", seq_len(n_frames), ".png"))
	on.exit(unlink(img_frames))
	message(paste("Generating", n_frames, "temporary .png images..."))
	for (i in seq_len(n_frames)) {
		message(paste(" - image", i, "of", n_frames))
		rgl::clear3d()
		hillshade %>%
			plot_3d_tidy_eval(heightmap, !!!append(gif_exprs, static_dots))
		rgl::snapshot3d(img_frames[i])
	}
	
	# build gif
	message("Generating .gif...")
	magick::image_write_gif(magick::image_read(img_frames), 
													path = file, delay = duration/n_frames)
	message("Done!")
	invisible(file)
}


transition_values <- function(from, to, steps = 10, 
															one_way = FALSE, type = "cos") {
	if (!(type %in% c("cos", "lin")))
		stop("type must be one of: 'cos', 'lin'")
}

# calculate input vectors for gif frames
n_frames <- 360
thetas <- transition_values(from = 0, to = 360, steps = n_frames,one_way = T,type = 'lin')
# generate gif
zscale <- 2
ambmat = ambient_shade(elmat)
elmat %>% 
	sphere_shade(texture = "imhof1", zscale = zscale) %>%
	add_shadow(ray_shade(elmat, zscale = 3, maxsearch = 300), 0.5) %>%
	add_shadow(ambmat, 0.5) %>%
	save_3d_gif(elmat, file = "mt_taranaki.gif", duration = 6,
							solid = TRUE, shadow = TRUE, water = TRUE, zscale = zscale,
							theta = thetas, phi = 45)
# generate gif
zscale <- 2
ambmat = ambient_shade(elmat)
elmat %>% 
	sphere_shade(texture = "imhof3", zscale = zscale) %>%
	add_shadow(ray_shade(elmat, zscale = 3, maxsearch = 300), 0.5) %>%
	add_shadow(ambmat, 0.5) %>%
	save_3d_gif(elmat, file = "mt_taranaki.gif", duration = 12,
							solid = TRUE, shadow = TRUE, water = TRUE, zscale = zscale,
							theta = thetas, phi = 45,windowsize = c(1920, 1080))