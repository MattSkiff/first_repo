int j = 0;
double sum_x = 0;
double mean = 0;
if (!ignore_rm) {
for (int i = 0; i < n; i++) {
sum_x += x[i];
}
}
else {
for (int i = 0; i < n; i++) {
if (NumericVector::is_na(x[i])) {
j ++;
}
else {
sum_x += x[i];
}
}
}
mean = sum_x/(n-j);
return mean;
}
')
mean_cpp(c(1,2,3,NA),T)
mean_cpp(c(1,2,3,NA),F)
mean_cpp(c(1,2,3),T)
mean_cpp(c(1,2,3),F)
chi_LRT_unlogged <- ((lambda_0/mean(y))^(sum(y)))*exp(n*(mean(y)-lambda_0))
chi_LRT_unlogged
p_chi_LRT_unlogged
p_chi_LRT
chi_LRT
c(1,2,3,4,5) %*% c(1,2,3,4,5)
x <- matrix(c(-1,3,2,4),nrow = 2)
D <- matrix(c(0.707,0.707,0.436,0.9),nrow = 2)
x %*% D
X
x
x <- matrix(c(-1,2,3,4),nrow = 2)
D <- matrix(c(0.707,0.707,0.436,0.9),nrow = 2)
x <- matrix(c(-1,2,3,4),nrow = 2)
D <- matrix(c(0.707,0.707,0.436,0.9),nrow = 2)
x %*% D
x
D
x %*% D
D %*% x
xD
x*D
x %*% t(D)
x <- matrix(c(-1,2,3,4),nrow = 2)
D <- matrix(c(0.707,0.707,0.436,0.9),nrow = 2)
x %*% t(D)
x %*% D
t(x) %*% D
x <- matrix(c(-1,2,3,4),nrow = 2)
D <- matrix(c(0.707,0.707,0.436,0.9),nrow = 2)
D <- t(x) %*% D + D
for (i in 1:2) {
D <- D[i,] / sqrt(sum(D^2))
}
D
t(x) %*% D
x <- matrix(c(-1,2,3,4),nrow = 2)
D <- matrix(c(0.707,0.707,0.436,0.9),nrow = 2)
x %*% t(D)
t(x) %*% D
t(x) %*% D + D
x <- matrix(c(-1,2,3,4),nrow = 2)
D <- matrix(c(0.707,0.707,0.436,0.9),nrow = 2)
D <- t(x) %*% D + D
D
for (i in 1:2) {
D <- D[i,] / sqrt(sum(D^2))
}
D[1,]
D[1]
D[3]
D
D
x <- matrix(c(-1,2,3,4),nrow = 2)
D <- matrix(c(0.707,0.707,0.436,0.9),nrow = 2)
D <- t(x) %*% D + D
D
D[1,]
x <- matrix(c(-1,2,3,4),nrow = 2)
D <- matrix(c(0.707,0.707,0.436,0.9),nrow = 2)
D <- t(x) %*% D + D
for (i in 1:2) {
D[i,] <- D[i,] / sqrt(sum(D^2))
}
D
sqrt(sum(D^2))
x <- matrix(c(-1,2,3,4),nrow = 2)
D <- matrix(c(0.707,0.707,0.436,0.9),nrow = 2)
D <- t(x) %*% D + D
for (i in 1:2) {
D[i,] <- D[i,] / sqrt(sum(D[i,]^2))
}
D
x <- matrix(c(-1,2,3,4),nrow = 2)
D <- matrix(c(0.707,0.707,0.436,0.9),nrow = 2)
norm(D)
norm(D[i,])
D
D*5
D/D^2
x <- matrix(c(-1,2,3,4),nrow = 2)
D <- matrix(c(0.707,0.707,0.436,0.9),nrow = 2)
D <- t(x) %*% D + D
for (i in 1:2) {
sumD[i,] <- D[i,] / sqrt(sum(D[i,]^2))
}
m<-"m<-0;cat(sub(0,deparse(m),m))";cat(sub(0,deparse(m),m))
m<-"m<-0;cat(sub(0,deparse(m),m))";cat(sub(0,deparse(m),m))
c(1,2,3)
A <- c(1,2,3)
A * /A
A * 1/A
list(list(),list(),list())
library(faraway)
install.packages("faraway")
library(faraway)
sleepstudy
sleep
sleepstudy
library(lme4)
sleepstudy
library(faraway)
library(lme4)
library(plotly)
library(ggplot2)
library(ggthemes)
mixed_eye_model <- lmer(Reaction ~ 1 + (1| Subjects) + Days, data= sleepstudy)
mixed_eye_model <- lmer(Reaction ~ 1 + (1| Subject) + Days, data= sleepstudy)
mixed_eye_model
mixed_eye_model$coefficients
mixed_eye_model@frame
mixed_eye_model@Gp
mixed_eye_model@call
mixed_eye_model@flist
mixed_eye_model@optinfo
KRmodcomp
install.packages("pbkrtest")
library(pbkrtest)
library(faraway)
library(sm)
library(plotly)
library(ggplot2)
library(gridExtra)
library(mgcv)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F,cache = T)
set.seed(1)
plot(nondocco_gam_4e,pages=1,scheme = 1,cex = 0.25,col = '#FF8000',shade.col = 'gray90',n = 100000,main = "Smooth Components of GAM",seWithMean = T)
library(faraway)
library(sm)
library(plotly)
library(ggplot2)
library(gridExtra)
library(mgcv)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F,cache = T)
set.seed(1)
data(prostate)
#xyplot(data = prostate, lweight ~ age, main = "Prostate: log (prostate weight) vs age of patient", xlab = "") - lattice
p <- plot_ly(prostate, x = ~age, y = ~lweight,
marker = list(size = 5,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 1),opacity = 0.5)) %>%
layout(title = 'Prostate: log (prostate weight) vs age of patient',
yaxis = list(zeroline = FALSE,
title = "log (prostate weight)"),
xaxis = list(zeroline = FALSE),
title = "age (years)") %>%
config(displayModeBar = F)
plot(lweight ~ age,data = prostate, main = "NW estimator: similarity of low bandwidths (fitted on original data)")
lines(ksmooth(y = prostate$lweight,x = prostate$age,n.points = length(prostate$age),x.points = prostate$age,"normal",0.1)$y,col = 'red')
lines(ksmooth(y = prostate$lweight,x = prostate$age,n.points = length(prostate$age),x.points = prostate$age,"normal",0.2)$y,col = 'red')
lines(ksmooth(y = prostate$lweight,x = prostate$age,n.points = length(prostate$age),x.points = prostate$age,"normal",0.3)$y,col = 'red')
lines(ksmooth(y = prostate$lweight,x = prostate$age,n.points = length(prostate$age),x.points = prostate$age,"normal",0.4)$y,col = 'red')
lines(ksmooth(y = prostate$lweight,x = prostate$age,n.points = length(prostate$age),x.points = prostate$age,"normal",0.5)$y,col = 'red')
lines(ksmooth(y = prostate$lweight,x = prostate$age,n.points = length(prostate$age),x.points = prostate$age,"normal",0.6)$y,col = 'red')
sum(ksmooth(y = prostate$lweight,x = prostate$age,n.points = length(prostate$age),x.points = prostate$age,"normal",0.2)$y)
sum(ksmooth(y = prostate$lweight,x = prostate$age,n.points = length(prostate$age),x.points = prostate$age,"normal",0.4)$y)
sum(ksmooth(y = prostate$lweight,x = prostate$age,n.points = length(prostate$age),x.points = prostate$age,"normal",0.6)$y)
gcv_ksmooth <- function(lambda,x_vec,y_vec) {
error_i <- 0
error_vec <- c()
for (i in 1:length(x_vec)) {
error_j <- (ksmooth(x = x_vec[-i],y = y_vec[-i],n.points = 1,x.points = x_vec[i],range.x = range(x_vec),
#range.x = c(min(x_vec)*max_extrap,max(x_vec)*max_extrap),
kernel = "normal",bandwidth = lambda)$y - y_vec[i])^2
if (!is.na(error_j)) {
error_i <- error_i + error_j
error_vec <- c(error_vec,error_i)
}
}
if (length(error_vec) == 0) {
lambda_error_2 <- Inf
} else {
lambda_error_2 <- sum(error_vec/length(error_vec)) # average error
}
return(lambda_error_2)
}
# function takes in ksmooth, calculate CV error, then iterates using a linear search
# manually optimising (without reducing step size)
gcv_ksmooth_optim <- function(step = 0.01,x_vec,y_vec,upper_limit = 10) {#min_error_change = 0.01) {
lambda_i <- 0
error_best <- Inf
lambda_error_vec <- c()
#i <- 0
#error_change <- Inf
#while (error_change > min_error_change) {
lambda_i_vec <- c()
while (lambda_i <= upper_limit-step) {
#i <- i + 1
#name <- paste('lambda', i,'plot.png', sep='_')
#png(name)
#plot(y_vec ~ x_vec, main = "GIF of CrossValidation select of best \n Normal Nadaraya-Watson Kernel Estimate",
#	 ylab = "log (prostate weight)",xlab = "Age")
lambda_i <- lambda_i + step # stepping through bandwidth
error_i <- 0
lambda_error <- Inf
error_vec <- c()
for (i in 1:length(x_vec)) {
error_j <- (ksmooth(x = x_vec[-i],
y = y_vec[-i],
n.points = 1,
x.points = x_vec[i],
#range.x = c(min(x_vec)*max_extrap,max(x_vec)*max_extrap),
kernel = "normal",
bandwidth = lambda_i)$y - y_vec[i])^2
if (!is.na(error_j)) {
error_i <- error_i + error_j
error_vec <- c(error_vec,error_i)
}
}
#lines(ksmooth(y = y_vec,x = x_vec,n.points = length(x_vec),x.points = x_vec,"normal",lambda_i)$y,col = 'black')
#dev.off()
if (length(error_vec) != 0) {
lambda_error <- sum(error_vec/length(error_vec)) # average error
}
lambda_error_vec <- c(lambda_error_vec,lambda_error)
lambda_i_vec <- c(lambda_i_vec,lambda_i)
#error_change = lambda_error_1 / lambda_error_2
if (lambda_error < error_best) {
lambda_f <- lambda_i
error_best <- lambda_error
}
}
#name <- paste('lambda', 9999,'plot.png', sep='_')
#png(name)
#plot(y_vec ~ x_vec, main = "GIF of CrossValidation select of best \n Normal Nadaraya-Watson Kernel Estimate",
#		 ylab = "log (prostate weight)",xlab = "Age")
#lines(ksmooth(y = y_vec,x = x_vec,n.points = length(x_vec),x.points = x_vec,"normal",lambda_f)$y,col = 'red')
#dev.off()
return(list('final_lambda' = lambda_f,'fitted_y' = ksmooth(x = x_vec,
y = y_vec,
n.points = length(x_vec),
x.points = x_vec,
#range.x = c(min(x_vec)*max_extrap,max(x_vec)*max_extrap),
kernel = "normal",
bandwidth = lambda_f)$y,'cv_errors' = lambda_error_vec,'lambdas' = lambda_i_vec))
}
x_vec <- prostate$age
y_vec <- prostate$lweight
paste("Optimal Bandwidth selection via optimise: ",optimise(f = gcv_ksmooth,interval = c(0,100),x_vec = prostate$age,y_vec = prostate$lweight,maximum = F,tol = 9)$minimum)
paste("Optimal LOOCV via optimise:  ",optimise(f = gcv_ksmooth,interval = c(0,100),x_vec = prostate$age,y_vec = prostate$lweight,maximum = F,tol = 9)$objective)
cv_best.list.99 <- gcv_ksmooth_optim(x_vec = x_vec,y_vec = y_vec,upper_limit = 99)
par(mfrow = c(2,2))
plot(cv_best.list.99$lambdas,cv_best.list.99$cv_errors,main = "CV Error vs Bandwidth",ylab = "CV Error (LOOCV)",xlab = "Bandwidth",type = 'l',sub = "Bandwidth < 100")
plot(cv_best.list.99$lambdas[1:2000],cv_best.list.99$cv_errors[1:2000],main = "CV Error vs Bandwidth",ylab = "CV Error (LOOCV)",xlab = "Bandwidth",type = 'l',lwd = 2,sub = "Bandwidth < 20")
plot(cv_best.list.99$lambdas[1:500],cv_best.list.99$cv_errors[1:500],main = "CV Error vs Bandwidth",ylab = "CV Error (LOOCV)",xlab = "Bandwidth",type = 'l',lwd = 2,sub = "Bandwidth < 5")
pred.df <- as.data.frame(list(prostate$age,cv_best.list.99$fitted_y,prostate$lweight))
colnames(pred.df) <- c("Age","Pred_lweight","lweight")
which(y_vec > 5) # identifying outlier
x_vec_nout <- prostate$age[-32]
y_vec_nout <- prostate$lweight[-32]
optimise(f = gcv_ksmooth,interval = c(0,100),x_vec = x_vec_nout,y_vec = y_vec_nout,
maximum = F,tol = 9)
cv_best.list.99.no <- gcv_ksmooth_optim(x_vec = x_vec_nout,y_vec = y_vec_nout,upper_limit = 99)
par(mfrow = c(1,3))
plot(cv_best.list.99.no$lambdas,cv_best.list.99.no$cv_errors,
main = "CV Error vs Bandwidth",ylab = "CV Error (LOOCV)",
xlab = "Bandwidth",type = 'l',sub = "Bandwidth < 1000 | Outlier removed")
plot(cv_best.list.99.no$lambdas[1:2000],cv_best.list.99.no$cv_errors[1:2000],
main = "CV Error vs Bandwidth",ylab = "CV Error (LOOCV)",
xlab = "Bandwidth",type = 'l',lwd = 2,sub = "Bandwidth < 20 | Outlier removed")
plot(cv_best.list.99.no$lambdas[1:500],cv_best.list.99.no$cv_errors[1:500],
main = "CV Error vs Bandwidth",ylab = "CV Error (LOOCV)",
xlab = "Bandwidth",type = 'l',lwd = 2,sub = "Bandwidth < 5 | Outlier removed")
pred.no.df <- as.data.frame(list(prostate$age[-32],cv_best.list.99.no$fitted_y,prostate$lweight[-32]))
colnames(pred.no.df) <- c("Age","Pred_lweight","lweight")
g1 <- ggplot(data = pred.df) +
geom_point(mapping = aes(x = Age,y= lweight)) +
geom_line(mapping = aes(x = Age,y = Pred_lweight),col = 'red') +
theme_classic() +
labs(title = "Age vs log (prostate weight)",subtitle = "F = 0.01",y = "log (prostate weight)", x = "Age")
g2 <- ggplot(data = pred.no.df) +
geom_point(mapping = aes(x = Age,y= lweight)) +
geom_line(mapping = aes(x = Age,y = Pred_lweight),col = 'red') +
theme_classic() +
labs(title = "Age vs log (prostate weight)",subtitle = "F = 0.01",y = "log (prostate weight)", x = "Age", caption = "Outlier removed")
grid.arrange(g1, g2, ncol = 2)
min(cv_best.list.99$cv_errors)
min(cv_best.list.99.no$cv_errors)
# ignoring initial overfit
min(cv_best.list.99$cv_errors[100:9900])
min(cv_best.list.99.no$cv_errors[100:9900])
# selecting lambdas
median(cv_best.list.99$lambdas[which(cv_best.list.99$cv_errors < 12.78740 & cv_best.list.99$cv_errors > 12.78738)])
median(cv_best.list.99.no$lambdas[which(cv_best.list.99.no$cv_errors < 8.407509 & cv_best.list.99.no$cv_errors > 8.407507)])
pred.df <- cbind(pred.df,'best_fit' = ksmooth(pred.df$Age,pred.df$lweight,kernel = "normal",bandwidth = 14.57,x.points = pred.df$Age)$y)
pred.no.df <- cbind(pred.no.df,'best_fit' = ksmooth(pred.no.df$Age,pred.no.df$lweight,kernel = "normal",bandwidth = 14.57,x.points = pred.no.df$Age)$y)
g1 <- ggplot(data = pred.df) +
geom_point(mapping = aes(x = Age,y= lweight)) +
geom_line(mapping = aes(x = Age,y = best_fit),col = 'red') +
theme_classic() +
labs(title = "Age vs log (prostate weight)",subtitle = "N-W normal smooth | F = 13.97",y = "log (prostate weight)", x = "Age", caption = "Reasonable minimum selected")
g2 <- ggplot(data = pred.no.df) +
geom_point(mapping = aes(x = Age,y= lweight)) +
geom_line(mapping = aes(x = Age,y = best_fit),col = 'red') +
theme_classic() +
labs(title = "Age vs log (prostate weight)",subtitle = "N-W normal smooth | F = 14.57",y = "log (prostate weight)", x = "Age",caption = "Outlier removed | Reasonable minimum selected ")
grid.arrange(g1, g2, ncol = 2)
smooth_data <- ksmooth(x = pred.df$Age,y = pred.df$lweight,n.points = 600,range.x = range(pred.df$Age),kernel = "normal",bandwidth = 14.57)$y
smooth_data.df <- as.data.frame(smooth_data);colnames(smooth_data.df) <- "smooth_y"
smooth_data.df$x <- seq(from = 41, to = 79, length.out = 600)
overfit_data <- ksmooth(x = pred.df$Age,y = pred.df$lweight,n.points = 600,range.x = range(pred.df$Age),kernel = "normal",bandwidth = 0.01)$y
overfit_data.df <- as.data.frame(overfit_data);colnames(overfit_data.df) <- "overfit_y"
overfit_data.df$x <- seq(from = 41, to = 79, length.out = 600)
# rm(overfit_data,overfit_data.df)
smooth_data_no <- ksmooth(x = pred.no.df$Age,y = pred.no.df$lweight,n.points = 600,range.x = range(pred.no.df$Age),kernel = "normal",bandwidth = 14.57)$y
smooth_data_no.df <- as.data.frame(smooth_data_no);colnames(smooth_data_no.df) <- "smooth_y"
smooth_data_no.df$x <- seq(from = 41, to = 79, length.out = 600)
g1 <- ggplot(data = pred.df) +
geom_point(mapping = aes(x = Age,y= lweight)) +
geom_line(data = smooth_data.df,mapping = aes(x = x,y = smooth_y),col = 'red') +
theme_classic() +
labs(title = "Age vs log (prostate weight)",subtitle = "N-W normal smooth | F = 13.97",y = "log (prostate weight)", x = "Age", caption = "Reasonable minimum selected \n Interpolated smooth")
g2 <- ggplot(data = pred.no.df) +
geom_point(mapping = aes(x = Age,y= lweight)) +
geom_line(data = smooth_data_no.df,mapping = aes(x = x,y = smooth_y),col = 'red') +
theme_classic() +
labs(title = "Age vs log (prostate weight)",subtitle = "N-W normal smooth | F = 14.57",y = "log (prostate weight)", x = "Age", caption = "Outlier removed | Reasonable minimum selected \n Interpolated smooth")
grid.arrange(g1, g2 ,ncol = 2)
smoother <- smooth.spline(x = prostate$age,y = prostate$lweight)
smoother
pred.df$smoothing_splines <- predict(smoother,prostate$age)$y
smooth_data.df$smoothing_splines <- predict(smoother,smooth_data.df$x)$y
ggplot(data = pred.df) +
geom_point(mapping = aes(x = Age, y = lweight)) +
geom_line(data = smooth_data.df,mapping = aes(x = x,y = smooth_y,colour = 'N-W (BW = 14)')) +
geom_line(data = smooth_data.df, mapping = aes(x = x, y = smoothing_splines,colour = 'Smoothing Spline')) +
geom_line(mapping = aes(x = Age, y = smoothing_splines,colour = 'orange')) +
theme_classic() +
labs(title = "Age vs log (prostate weight)",y = "log (prostate weight)", x = "Age", subtitle = "Smooths added (Nadaraya-Watson, Smoothing Splines)",caption = "For N-W, a reasonable minimum selected, smooth interpolated (n = 600)") +
scale_y_continuous(limits = c(2,6.5)) +
scale_colour_manual("Smooths", breaks = c("N-W (BW = 14)", "Smoothing Spline"),
values = c("red", "orange",'orange'))
table(prostate$age)
# code directly from faraway
g1 <- ggplot(prostate, aes(x=age,y=lweight)) +
geom_point(alpha=0.25) +
geom_smooth(method="loess", span=0.99,aes(fill = '0.99',colour = "0.99")) +
theme_classic() +
labs(title = "Age vs log (prostate weight)",y = "log (prostate weight)",x = "Age", subtitle = "Lowess smooths fitted") +
scale_fill_manual("Smooth Span", breaks = c("0.99"), values = c("red")) +
scale_colour_manual("Smooth Span", breaks = c("0.99"), values = c("firebrick"))
g2 <- ggplot(prostate, aes(x=age,y=lweight)) +
geom_point(alpha=0.25) +
geom_smooth(method="loess", span=0.66,aes(fill = '0.66',colour = "0.66")) +
theme_classic() +
labs(title = "Age vs log (prostate weight)",y = "log (prostate weight)",x = "Age", subtitle = "Lowess smooths fitted") +
scale_fill_manual("Smooth Span", breaks = c("0.66"),  values = c("orange")) +
scale_colour_manual("Smooth Span", breaks = c("0.66"),  values = c("chocolate4"))
g3 <- ggplot(prostate, aes(x=age,y=lweight)) +
geom_point(alpha=0.25) +
geom_smooth(method="loess", span=0.33,aes(fill = '0.33',colour = "0.33")) +
theme_classic() +
labs(title = "Age vs log (prostate weight)",y = "log (prostate weight)",x = "Age", subtitle = "Lowess smooths fitted") +
scale_fill_manual("Smooth Span", breaks = c("0.33"),values = c('yellow')) +
scale_colour_manual("Smooth Span", breaks = c("0.33"),values = c('gold4'))
g4 <- ggplot(prostate, aes(x=age,y=lweight)) +
geom_point(alpha=0.25) +
geom_smooth(method="loess", span=0.2,aes(fill = '0.1',colour = '0.1')) +
theme_classic() +
labs(title = "Age vs log (prostate weight)",y = "log (prostate weight)",x = "Age",subtitle = "Lowess smooths fitted") +
scale_fill_manual("Smooth Span", breaks = c("0.1"), values = c("blue")) +
scale_colour_manual("Smooth Span", breaks = c("0.1"), values = c("darkblue"))
grid.arrange(g1,g2,g3,g4,ncol = 2,nrow = 2)
library(mgcv)
amod <- gam(lweight ~ s(age,lpsa), data=prostate)
vis.gam(amod, color = "topo", ticktype="detailed",theta=-30,phi = 30,n.grid = 60, main = "Bivariate fit of log (prostate weight) \n with Age and log (prostate specific antigen)",zlab = "log-pw",xlab = "Age",ylab = "log-psa")
vis.gam(amod, color = "topo", ticktype="simple",theta=0,phi = 0,n.grid = 60, main = "Bivariate fit of log (prostate weight) \n with Age and log (prostate specific antigen)",zlab = "log-pw",xlab = "Age",ylab = "log-psa")
vis.gam(amod, color = "topo", ticktype="simple",theta=90,phi = 0,n.grid = 60, main = "Bivariate fit of log (prostate weight) \n with Age and log (prostate specific antigen)",zlab = "log-pw",xlab = "Age",ylab = "log-psa")
vis.gam(amod,ticktype="detailed",theta=-30,phi = 30,n.grid = 60, main = "Bivariate fit of log (prostate weight) \n with Age and log (prostate specific antigen)",zlab = "log-pw",xlab = "Age",ylab = "log-psa", se = 5)
vis.gam(amod, ticktype="simple",theta=0,phi = 0,n.grid = 60, main = "Bivariate fit of log (prostate weight) \n with Age and log (prostate specific antigen)",zlab = "log-pw",xlab = "Age",ylab = "log-psa",se = 5)
vis.gam(amod, ticktype="simple",theta=90,phi = 0,n.grid = 60, main = "Bivariate fit of log (prostate weight) \n with Age and log (prostate specific antigen)",zlab = "log-pw",xlab = "Age",ylab = "log-psa", se = 5)
nondocco_gam <- gam(nondocco ~
sex+freepoor+freerepa+chcond1+chcond2+agesq+
s(age)+s(income)+s(illness, k = 6)+s(actdays)+s(hscore)+s(prescrib, k = 6)+s(nonpresc, k = 6),
data= dvisits,family = "poisson",scale = -1,method = "ML")
summary(nondocco_gam)
nondocco_gam_1 <- gam(nondocco ~
sex+freepoor+freerepa+chcond1+chcond2+
s(age)+s(income)+s(illness, k = 6)+s(actdays)+s(hscore)+s(prescrib, k = 6)+s(nonpresc, k = 6),
data= dvisits,family = "poisson",scale = -1,method = "ML")
summary(nondocco_gam_1)
nondocco_gam_2 <- gam(nondocco ~
sex+freerepa+chcond1+chcond2+
s(age)+s(income)+s(illness, k = 6)+s(actdays)+s(hscore)+s(prescrib, k = 6)+s(nonpresc, k = 6),
data= dvisits,family = "poisson",scale = -1,method = "ML")
summary(nondocco_gam_2)
nondocco_gam_4 <- gam(nondocco ~
sex+freerepa+chcond1+chcond2+
s(age)+s(income)+s(illness, k = 6)+s(actdays)+s(hscore)+s(prescrib, k = 6),
data = dvisits,family = "poisson",scale = -1,method = "ML")
summary(nondocco_gam_4)
#age
nondocco_gam_4a <- gam(nondocco ~
sex+freerepa+chcond1+chcond2+age+s(illness, k = 6)+s(actdays)+s(hscore)+s(prescrib, k = 6),
data = dvisits,family = "poisson",scale = -1,method = "ML")
#illness
nondocco_gam_4b <- gam(nondocco ~
sex+freerepa+chcond1+chcond2+illness+
s(age)+s(actdays)+s(hscore)+s(prescrib, k = 6),
data = dvisits,family = "poisson",scale = -1,method = "ML")
#presib
nondocco_gam_4c <- gam(nondocco ~
sex+freerepa+chcond1+chcond2+prescrib+
s(age)+s(illness, k = 6)+s(actdays)+s(hscore),
data = dvisits,family = "poisson",scale = -1,method = "ML")
#hscore
nondocco_gam_4d <- gam(nondocco ~
sex+freerepa+chcond1+chcond2+hscore+
s(age)+s(illness, k = 6)+s(actdays)+s(prescrib, k = 6),
data = dvisits,family = "poisson",scale = -1,method = "ML")
#actdays
nondocco_gam_4e <- gam(nondocco ~
sex+freerepa+chcond1+chcond2+actdays+
s(age)+s(illness, k = 6)+s(hscore)+s(prescrib, k = 6),
data = dvisits,family = "poisson",scale = -1,method = "ML")
anova(nondocco_gam_4,nondocco_gam_4a,test = "F")
anova(nondocco_gam_4,nondocco_gam_4b,test = "F")
anova(nondocco_gam_4,nondocco_gam_4c,test = "F")
anova(nondocco_gam_4,nondocco_gam_4d,test = "F")
anova(nondocco_gam_4,nondocco_gam_4e,test = "F")
pchisq(deviance(nondocco_gam_4a)-deviance(nondocco_gam_4),
df.residual(nondocco_gam_4a)-df.residual(nondocco_gam_4),
lower.tail=FALSE)
pchisq(deviance(nondocco_gam_4b)-deviance(nondocco_gam_4),
df.residual(nondocco_gam_4b)-df.residual(nondocco_gam_4),
lower.tail=FALSE)
pchisq(deviance(nondocco_gam_4c)-deviance(nondocco_gam_4),
df.residual(nondocco_gam_4c)-df.residual(nondocco_gam_4),
lower.tail=FALSE)
pchisq(deviance(nondocco_gam_4d)-deviance(nondocco_gam_4),
df.residual(nondocco_gam_4d)-df.residual(nondocco_gam_4),
lower.tail=FALSE)
pchisq(deviance(nondocco_gam_4e)-deviance(nondocco_gam_4),
df.residual(nondocco_gam_4e)-df.residual(nondocco_gam_4),
lower.tail=FALSE)
summary(nondocco_gam_4e)
anova(nondocco_gam,nondocco_gam_4,test = "F")
pchisq(deviance(nondocco_gam_4)-deviance(nondocco_gam),
df.residual(nondocco_gam_4)-df.residual(nondocco_gam),
lower.tail=FALSE)
nondocco_gam_4e$call
nondocco_gam$call
names(nondocco_gam$coefficients)
names(nondocco_gam_4e$coefficients)
nondocco_reduced_glm <- glm(nondocco ~ sex+freerepa+chcond1+chcond2+age+illness+actdays+hscore+prescrib,data = dvisits,family = "poisson")
anova(nondocco_gam,nondocco_reduced_glm,test = "F")
#pchisq(deviance(nondocco_gam_4)-deviance(nondocco_reduced_glm),
#       df.residual(nondocco_gam_4)-df.residual(nondocco_gam),
#       lower.tail=FALSE)
options(scipen = 10)
summary(nondocco_gam_4e)[1]
#par(mfrow = c(2,3))
#plot(nondocco_gam_4e,se = T,shade = T,scale = 0,n = 50000,seWithMean = T,select = 1)
#plot(nondocco_gam_4e,se = T,shade = T,scale = 0,n = 50000,seWithMean = T,select = 2)
#plot(nondocco_gam_4e,se = T,shade = T,scale = 0,n = 50000,seWithMean = T,select = 3)
#plot(nondocco_gam_4e,se = T,shade = T,scale = 0,n = 50000,seWithMean = T,select = 4)
#plot(nondocco_gam_4e,se = T,shade = T,scale = 0,n = 50000,seWithMean = T,select = 5)
plot(nondocco_gam_4e,pages=1,scheme = 1,cex = 0.25,col = '#FF8000',shade.col = 'gray90',n = 100000,main = "Smooth Components of GAM",seWithMean = T)
plot(nondocco_gam_4e,pages=1,scheme = 1,cex = 0.25,col = '#FF8000',shade.col = 'gray90',n = 100000,main = "Residuals of GAM",residuals = T)
par(mfrow = c(2,2),mar = c(0.5,0.5,0.5,0.5))
vis.gam(nondocco_gam_4e,theta=-45,color="heat",view = c("illness","prescrib"),nCol = 5,ticktype = "simple",zlab = "Non-Doctors Visits",type = 'response')
vis.gam(nondocco_gam_4e,theta=-45,color="heat",view = c("illness","age"),nCol = 5,ticktype = "simple",zlab = "Non-Doctors Visits",type = 'response')
vis.gam(nondocco_gam_4e,theta=-45,color="heat",view = c("illness","hscore"),nCol = 5,ticktype = "simple",zlab = "Non-Doctors Visits",type = 'response')
vis.gam(nondocco_gam_4e,theta=-45,color="heat",view = c("prescrib","age"),nCol = 5,ticktype = "simple",zlab = "Non-Doctors Visits",type = 'response')
vis.gam(nondocco_gam_4e,theta=-45,color="heat",view = c("prescrib","hscore"),nCol = 5,ticktype = "simple",zlab = "Non-Doctors Visits",type = 'response')
vis.gam(nondocco_gam_4e,theta=-45,color="heat",view = c("age","hscore"),nCol = 5,ticktype = "simple",zlab = "Non-Doctors Visits",type = 'response')
table(dvisits$age)
table(dvisits$income)
table(dvisits$illness)
table(dvisits$hscore)
table(dvisits$prescrib)
(Dave <- dvisits[nrow(dvisits),])
predict.glm(nondocco_reduced_glm,Dave,type = "response",se.fit = T)
hist(rpois(100000,rnorm(100000,0.06627531,0.009154955)),main = "Predicted Posterior Distribution: GLM",xlab = "Number of Non-Doctor Health Professional Visits",col = 'red')
table(rpois(100000,rnorm(100000,0.06627531,0.009154955)))
predict.gam(nondocco_gam_4e,Dave,type = "response",se.fit = T,unconditional = T)
hist(rpois(100000,rnorm(100000,0.1089584,0.0119574)),main = "Predicted Posterior Distribution: GAM",xlab = "Number of Non-Doctor Health Professional Visits",col = 'red')
table(rpois(100000,rnorm(100000,0.1089584,0.0119574)))
install.packages("h2o")
install.packages("h2o")
deployApp()
library(rsconnect)
deployApp()
setwd("G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow")
deployApp()
