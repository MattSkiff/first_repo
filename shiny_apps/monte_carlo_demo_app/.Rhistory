}
ggplot(data = melt(flow_field.mat)) +
geom_tile(mapping = aes(x = Var1, y = Var2,fill = value)) # visualised as the flip transformation of the matrix
message("First Iter. flow field state")
print(flow_field.mat)
}
# generate empty matrix
library(ggplot2)
library(reshape2)
finite_diff.func <- function(rows = 10,cols = 10,fixed_side = "left",head_value = 15, base_value = 1.5) {
flow_field.mat <- matrix(data = rep(0,rows*cols),nrow = rows, ncol = cols) #rep(rows*cols,0) #rnorm(rows*cols)
flow_field.mat[1,] <- rep(head_value,dim(flow_field.mat)[1]) # replacing top values of matrix
flow_field.mat[,dim(flow_field.mat)[2]] <- rep(head_value,dim(flow_field.mat)[2]) # replacing right hand side values of matrix w/higher water level
flow_field.mat[dim(flow_field.mat)[1],1] <- base_value # setting lower water level
message("Initial flow field state")
print(flow_field.mat) # show initial state
for (i in 1:dim(flow_field.mat)[1]) { # columns
for (j in 1:dim(flow_field.mat)[1]) { # rows
if (i != 1 & i != dim(flow_field.mat)[1]) { # not left or right columns
if (j != 1 & j != dim(flow_field.mat)[1]) { # not bottom or top rows
flow_field.mat[j,i] <- (flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1]+flow_field.mat[j-1,i])/4 # h1+h2+h3+h4 #4
} else if (j == dim(flow_field.mat)[1] & i != dim(flow_field.mat)[2] & i != 1) { # is a bottom row, not corner or base_value
flow_field.mat[j,i] <- (2*flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1])/4 # h1 + 2*h2 + h4 #1
} else if (j == dim(flow_field.mat)[1] & i == dim(flow_field.mat)[2]) { # corner case (only 1 node)
flow_field.mat[j,i] <- (2*flow_field.mat[j+1,i]+2*flow_field.mat[j,i+1])/4 # 2*h1 + 2*h4 #2
}
} else if (i == 1 & j != 1 & j != dim(flow_field.mat)[1]) { # is right hand column, not first or bottom row
flow_field.mat[j,i] <-  (flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,j-1])/4 #3
}
}
}
x11()
ggplot(data = melt(flow_field.mat)) +
geom_tile(mapping = aes(x = Var1, y = Var2,fill = value)) # visualised as the flip transformation of the matrix
message("First Iter. flow field state")
print(flow_field.mat)
}
finite_diff.func()
# generate empty matrix
library(ggplot2)
library(reshape2)
finite_diff.func <- function(rows = 10,cols = 10,fixed_side = "left",head_value = 15, base_value = 1.5) {
flow_field.mat <- matrix(data = rep(0,rows*cols),nrow = rows, ncol = cols) #rep(rows*cols,0) #rnorm(rows*cols)
flow_field.mat[1,] <- rep(head_value,dim(flow_field.mat)[1]) # replacing top values of matrix
flow_field.mat[,dim(flow_field.mat)[2]] <- rep(head_value,dim(flow_field.mat)[2]) # replacing right hand side values of matrix w/higher water level
flow_field.mat[dim(flow_field.mat)[1],1] <- base_value # setting lower water level
message("Initial flow field state")
print(flow_field.mat) # show initial state
for (i in 1:dim(flow_field.mat)[1]) { # columns
for (j in 1:dim(flow_field.mat)[1]) { # rows
if (i != 1 & i != dim(flow_field.mat)[1]) { # not left or right columns
if (j != 1 & j != dim(flow_field.mat)[1]) { # not bottom or top rows
flow_field.mat[j,i] <- 4#(flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1]+flow_field.mat[j-1,i])/4 # h1+h2+h3+h4 #4
} else if (j == dim(flow_field.mat)[1] & i != dim(flow_field.mat)[2] & i != 1) { # is a bottom row, not corner or base_value
flow_field.mat[j,i] <- (2*flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1])/4 # h1 + 2*h2 + h4 #1
} else if (j == dim(flow_field.mat)[1] & i == dim(flow_field.mat)[2]) { # corner case (only 1 node)
flow_field.mat[j,i] <- (2*flow_field.mat[j+1,i]+2*flow_field.mat[j,i+1])/4 # 2*h1 + 2*h4 #2
}
} else if (i == 1 & j != 1 & j != dim(flow_field.mat)[1]) { # is right hand column, not first or bottom row
flow_field.mat[j,i] <-  (flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,j-1])/4 #3
}
}
}
x11()
ggplot(data = melt(flow_field.mat)) +
geom_tile(mapping = aes(x = Var1, y = Var2,fill = value)) # visualised as the flip transformation of the matrix
message("First Iter. flow field state")
print(flow_field.mat)
}
finite_diff.func()
# generate empty matrix
library(ggplot2)
library(reshape2)
finite_diff.func <- function(rows = 10,cols = 10,fixed_side = "left",head_value = 15, base_value = 1.5) {
flow_field.mat <- matrix(data = rep(0,rows*cols),nrow = rows, ncol = cols) #rep(rows*cols,0) #rnorm(rows*cols)
flow_field.mat[1,] <- rep(head_value,dim(flow_field.mat)[1]) # replacing top values of matrix
flow_field.mat[,dim(flow_field.mat)[2]] <- rep(head_value,dim(flow_field.mat)[2]) # replacing right hand side values of matrix w/higher water level
flow_field.mat[dim(flow_field.mat)[1],1] <- base_value # setting lower water level
message("Initial flow field state")
print(flow_field.mat) # show initial state
for (i in 1:dim(flow_field.mat)[1]) { # columns
for (j in 1:dim(flow_field.mat)[1]) { # rows
if (i != 1 & i != dim(flow_field.mat)[1]) { # not left or right columns
if (j != 1 & j != dim(flow_field.mat)[1]) { # not bottom or top rows
flow_field.mat[j,i] <- (flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1]+flow_field.mat[j-1,i])/4 # h1+h2+h3+h4 #4
} else if (j == dim(flow_field.mat)[1] & i != dim(flow_field.mat)[2] & i != 1) { # is a bottom row, not corner or base_value
flow_field.mat[j,i] <- 1#(2*flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1])/4 # h1 + 2*h2 + h4 #1
} else if (j == dim(flow_field.mat)[1] & i == dim(flow_field.mat)[2]) { # corner case (only 1 node)
flow_field.mat[j,i] <- (2*flow_field.mat[j+1,i]+2*flow_field.mat[j,i+1])/4 # 2*h1 + 2*h4 #2
}
} else if (i == 1 & j != 1 & j != dim(flow_field.mat)[1]) { # is right hand column, not first or bottom row
flow_field.mat[j,i] <-  (flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,j-1])/4 #3
}
}
}
x11()
ggplot(data = melt(flow_field.mat)) +
geom_tile(mapping = aes(x = Var1, y = Var2,fill = value)) # visualised as the flip transformation of the matrix
message("First Iter. flow field state")
print(flow_field.mat)
}
finite_diff.func()
# generate empty matrix
library(ggplot2)
library(reshape2)
finite_diff.func <- function(rows = 10,cols = 10,fixed_side = "left",head_value = 15, base_value = 1.5) {
flow_field.mat <- matrix(data = rep(0,rows*cols),nrow = rows, ncol = cols) #rep(rows*cols,0) #rnorm(rows*cols)
flow_field.mat[1,] <- rep(head_value,dim(flow_field.mat)[1]) # replacing top values of matrix
flow_field.mat[,dim(flow_field.mat)[2]] <- rep(head_value,dim(flow_field.mat)[2]) # replacing right hand side values of matrix w/higher water level
flow_field.mat[dim(flow_field.mat)[1],1] <- base_value # setting lower water level
message("Initial flow field state")
print(flow_field.mat) # show initial state
for (i in 1:dim(flow_field.mat)[1]) { # columns
for (j in 1:dim(flow_field.mat)[1]) { # rows
if (i != 1 & i != dim(flow_field.mat)[1]) { # not left or right columns
if (j != 1 & j != dim(flow_field.mat)[1]) { # not bottom or top rows
flow_field.mat[j,i] <- (flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1]+flow_field.mat[j-1,i])/4 # h1+h2+h3+h4 #4
} else if (j == dim(flow_field.mat)[1] & i != dim(flow_field.mat)[2] & i != 1) { # is a bottom row, not corner or base_value
flow_field.mat[j,i] <- (2*flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1])/4 # h1 + 2*h2 + h4 #1
} else if (j == dim(flow_field.mat)[1] & i == dim(flow_field.mat)[2]) { # corner case (only 1 node)
flow_field.mat[j,i] <- (2*flow_field.mat[j+1,i]+2*flow_field.mat[j,i+1])/4 # 2*h1 + 2*h4 #2
}
} else if (i == 1 & j != 1 & j != dim(flow_field.mat)[1]) { # is right hand column, not first or bottom row
flow_field.mat[j,i] <-  (flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,j-1])/4 #3
}
}
}
x11()
ggplot(data = melt(flow_field.mat)) +
geom_tile(mapping = aes(x = Var1, y = Var2,fill = value)) # visualised as the flip transformation of the matrix
message("First Iter. flow field state")
print(flow_field.mat)
}
finite_diff.func()
# generate empty matrix
library(ggplot2)
library(reshape2)
finite_diff.func <- function(rows = 10,cols = 10,fixed_side = "left",head_value = 15, base_value = 1.5) {
flow_field.mat <- matrix(data = rep(0,rows*cols),nrow = rows, ncol = cols) #rep(rows*cols,0) #rnorm(rows*cols)
flow_field.mat[1,] <- rep(head_value,dim(flow_field.mat)[1]) # replacing top values of matrix
flow_field.mat[,dim(flow_field.mat)[2]] <- rep(head_value,dim(flow_field.mat)[2]) # replacing right hand side values of matrix w/higher water level
flow_field.mat[dim(flow_field.mat)[1],1] <- base_value # setting lower water level
message("Initial flow field state")
print(flow_field.mat) # show initial state
for (i in 1:dim(flow_field.mat)[1]) { # columns
for (j in 1:dim(flow_field.mat)[1]) { # rows
if (i != 1 & i != dim(flow_field.mat)[1]) { # not left or right columns
if (j != 1 & j != dim(flow_field.mat)[1]) { # not bottom or top rows
flow_field.mat[j,i] <- (flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1]+flow_field.mat[j-1,i])/4 # h1+h2+h3+h4 #4
} else if (j == dim(flow_field.mat)[1] & i != dim(flow_field.mat)[2] & i != 1) { # is a bottom row, not corner or base_value
flow_field.mat[j,i] <- (2*flow_field.mat[j-1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1])/4 # h1 + 2*h2 + h4 #1
} else if (j == dim(flow_field.mat)[1] & i == dim(flow_field.mat)[2]) { # corner case (only 1 node)
flow_field.mat[j,i] <- (2*flow_field.mat[j+1,i]+2*flow_field.mat[j,i+1])/4 # 2*h1 + 2*h4 #2
}
} else if (i == 1 & j != 1 & j != dim(flow_field.mat)[1]) { # is right hand column, not first or bottom row
flow_field.mat[j,i] <-  (flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,j-1])/4 #3
}
}
}
x11()
ggplot(data = melt(flow_field.mat)) +
geom_tile(mapping = aes(x = Var1, y = Var2,fill = value)) # visualised as the flip transformation of the matrix
message("First Iter. flow field state")
print(flow_field.mat)
}
finite_diff.func()
finite_diff.func <- function(rows = 10,cols = 10,fixed_side = "left",head_value = 15, base_value = 1.5,min_change = 0.01) {
flow_field.mat <- matrix(data = rep(0,rows*cols),nrow = rows, ncol = cols) #rep(rows*cols,0) #rnorm(rows*cols)
flow_field.mat[1,] <- rep(head_value,dim(flow_field.mat)[1]) # replacing top values of matrix
flow_field.mat[,dim(flow_field.mat)[2]] <- rep(head_value,dim(flow_field.mat)[2]) # replacing right hand side values of matrix w/higher water level
flow_field.mat[dim(flow_field.mat)[1],1] <- base_value # setting lower water level
#message("Initial flow field state")
#print(flow_field.mat) # show initial state
#write(flow_field.mat, stdout())
flow_fields.ls <- list()
flow_animate.df <- data.frame()
h_maps <- list()
k = 1
diff <- 10
while (diff > min_change) {
flow_old.mat <- flow_field.mat
for (j in 1:dim(flow_field.mat)[1]) { # rows
for (i in 1:dim(flow_field.mat)[1]) { # columns
if (i != 1 & i != dim(flow_field.mat)[2] & j != 1 & j != dim(flow_field.mat)[1]) { # not left or right columns or bottom or top columns
flow_field.mat[j,i] <- (flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1]+flow_field.mat[j-1,i])/4 # h1+h2+h3+h4  - interior nodes
} else if (j == dim(flow_field.mat)[1] & i != dim(flow_field.mat)[2] & i != 1) { # is bottom row, not last column or first column
flow_field.mat[j,i] <- (2*flow_field.mat[j-1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1])/4 # h1 + 2*h2 + h4
} else if (j == dim(flow_field.mat)[1] & i == dim(flow_field.mat)[2]) { # corner case (only 1 node)
#flow_field.mat[j,i] <- 3#(2*flow_field.mat[j,i-1]+2*flow_field.mat[j-1,i])/4 # 2*h1 + 2*h4
# this remains the same! As this is the impermeable right hand bound (represents water flow?)
} else if (i == 1 & j != 1 & j != dim(flow_field.mat)[1]) { # is left hand column, not first or bottom row
flow_field.mat[j,i] <- (flow_field.mat[j+1,i]+2*flow_field.mat[j,i+1]+flow_field.mat[j,j-1])/4 # h1 + 2*h2 + h4
}
}
}
#g <- ggplot(data = melt(flow_field.mat)) +
#  geom_tile(mapping = aes(x = Var1, y = Var2,fill = value))
#h_maps[[k]] <- g
diff <- sum(flow_field.mat) - sum(flow_old.mat)
k <- k + 1
flow_fields.ls[[k]] <- flow_field.mat
flow_stacked.df <- melt(flow_field.mat)
flow_stacked.df <- cbind(flow_stacked.df,rep(k,nrow(flow_stacked.df)))
flow_animate.df <- rbind(flow_animate.df,flow_stacked.df)
#print(flow_field.mat)
}
animate.df <- finite_diff.func(base_value = 0)
ggplot(data = animate.df) +
geom_tile(mapping = aes(x = x, y = y,fill = flow)) +
transition_time(iteration) +
labs(title = "Finite State Model of Ground Water Flow", subtitle = "Iteration: {frame_time}") +
theme_light() +
scale_fill_viridis_c() +
ease_aes("linear")
}
finite_diff.func()
library(shiny)
library(ggplot2)
library(gganimate)
library(reshape2)
library(reshape2)
require(gifski)
require(png)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Base Water Level:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
imageOutput("finiteDifferenceGif")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$finiteDifferenceGif <- renderImage({
outfile <- tempfile(fileext = '.gif')
finite_diff.func()
})
finite_diff.func <- function(rows = 10,cols = 10,fixed_side = "left",head_value = 15, base_value = 1.5,min_change = 0.01) {
flow_field.mat <- matrix(data = rep(0,rows*cols),nrow = rows, ncol = cols) #rep(rows*cols,0) #rnorm(rows*cols)
flow_field.mat[1,] <- rep(head_value,dim(flow_field.mat)[1]) # replacing top values of matrix
flow_field.mat[,dim(flow_field.mat)[2]] <- rep(head_value,dim(flow_field.mat)[2]) # replacing right hand side values of matrix w/higher water level
flow_field.mat[dim(flow_field.mat)[1],1] <- base_value # setting lower water level
#message("Initial flow field state")
#print(flow_field.mat) # show initial state
#write(flow_field.mat, stdout())
flow_fields.ls <- list()
flow_animate.df <- data.frame()
h_maps <- list()
k = 1
diff <- 10
while (diff > min_change) {
flow_old.mat <- flow_field.mat
for (j in 1:dim(flow_field.mat)[1]) { # rows
for (i in 1:dim(flow_field.mat)[1]) { # columns
if (i != 1 & i != dim(flow_field.mat)[2] & j != 1 & j != dim(flow_field.mat)[1]) { # not left or right columns or bottom or top columns
flow_field.mat[j,i] <- (flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1]+flow_field.mat[j-1,i])/4 # h1+h2+h3+h4  - interior nodes
} else if (j == dim(flow_field.mat)[1] & i != dim(flow_field.mat)[2] & i != 1) { # is bottom row, not last column or first column
flow_field.mat[j,i] <- (2*flow_field.mat[j-1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1])/4 # h1 + 2*h2 + h4
} else if (j == dim(flow_field.mat)[1] & i == dim(flow_field.mat)[2]) { # corner case (only 1 node)
#flow_field.mat[j,i] <- 3#(2*flow_field.mat[j,i-1]+2*flow_field.mat[j-1,i])/4 # 2*h1 + 2*h4
# this remains the same! As this is the impermeable right hand bound (represents water flow?)
} else if (i == 1 & j != 1 & j != dim(flow_field.mat)[1]) { # is left hand column, not first or bottom row
flow_field.mat[j,i] <- (flow_field.mat[j+1,i]+2*flow_field.mat[j,i+1]+flow_field.mat[j,j-1])/4 # h1 + 2*h2 + h4
}
}
}
#g <- ggplot(data = melt(flow_field.mat)) +
#  geom_tile(mapping = aes(x = Var1, y = Var2,fill = value))
#h_maps[[k]] <- g
diff <- sum(flow_field.mat) - sum(flow_old.mat)
k <- k + 1
flow_fields.ls[[k]] <- flow_field.mat
flow_stacked.df <- melt(flow_field.mat)
flow_stacked.df <- cbind(flow_stacked.df,rep(k,nrow(flow_stacked.df)))
flow_animate.df <- rbind(flow_animate.df,flow_stacked.df)
#print(flow_field.mat)
}
animate.df <- finite_diff.func(base_value = 0)
ggplot(data = animate.df) +
geom_tile(mapping = aes(x = x, y = y,fill = flow)) +
transition_time(iteration) +
labs(title = "Finite State Model of Ground Water Flow", subtitle = "Iteration: {frame_time}") +
theme_light() +
scale_fill_viridis_c() +
ease_aes("linear")
}
}
finite_diff.func()
finite_diff.func()
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
timestamp()
##------ Fri Aug 09 13:53:36 2019 ------##
args(timestamp())
##------ Fri Aug 09 13:53:43 2019 ------##
?timestamp()
times()
time()
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
finite_diff.func <- function(rows = 10,cols = 10,fixed_side = "left",head_value = 15, base_value = 1.5,min_change = 0.01) {
flow_field.mat <- matrix(data = rep(0,rows*cols),nrow = rows, ncol = cols) #rep(rows*cols,0) #rnorm(rows*cols)
flow_field.mat[1,] <- rep(head_value,dim(flow_field.mat)[1]) # replacing top values of matrix
flow_field.mat[,dim(flow_field.mat)[2]] <- rep(head_value,dim(flow_field.mat)[2]) # replacing right hand side values of matrix w/higher water level
flow_field.mat[dim(flow_field.mat)[1],1] <- base_value # setting lower water level
message("Initial flow field state")
print(flow_field.mat) # show initial state
#write(flow_field.mat, stdout())
flow_fields.ls <- list()
flow_animate.df <- data.frame()
h_maps <- list()
k = 1
diff <- 10
while (diff > min_change) {
flow_old.mat <- flow_field.mat
for (j in 1:dim(flow_field.mat)[1]) { # rows
for (i in 1:dim(flow_field.mat)[1]) { # columns
if (i != 1 & i != dim(flow_field.mat)[2] & j != 1 & j != dim(flow_field.mat)[1]) { # not left or right columns or bottom or top columns
flow_field.mat[j,i] <- (flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1]+flow_field.mat[j-1,i])/4 # h1+h2+h3+h4  - interior nodes
} else if (j == dim(flow_field.mat)[1] & i != dim(flow_field.mat)[2] & i != 1) { # is bottom row, not last column or first column
flow_field.mat[j,i] <- (2*flow_field.mat[j-1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1])/4 # h1 + 2*h2 + h4
} else if (j == dim(flow_field.mat)[1] & i == dim(flow_field.mat)[2]) { # corner case (only 1 node)
#flow_field.mat[j,i] <- 3#(2*flow_field.mat[j,i-1]+2*flow_field.mat[j-1,i])/4 # 2*h1 + 2*h4
# this remains the same! As this is the impermeable right hand bound (represents water flow?)
} else if (i == 1 & j != 1 & j != dim(flow_field.mat)[1]) { # is left hand column, not first or bottom row
flow_field.mat[j,i] <- (flow_field.mat[j+1,i]+2*flow_field.mat[j,i+1]+flow_field.mat[j,j-1])/4 # h1 + 2*h2 + h4
}
}
}
#g <- ggplot(data = melt(flow_field.mat)) +
#  geom_tile(mapping = aes(x = Var1, y = Var2,fill = value))
#h_maps[[k]] <- g
diff <- sum(flow_field.mat) - sum(flow_old.mat)
k <- k + 1
flow_fields.ls[[k]] <- flow_field.mat
flow_stacked.df <- melt(flow_field.mat)
flow_stacked.df <- cbind(flow_stacked.df,rep(k,nrow(flow_stacked.df)))
flow_animate.df <- rbind(flow_animate.df,flow_stacked.df)
#print(flow_field.mat)
return(flow_animate.df)
}
finite_diff.func <- function(rows = 10,cols = 10,fixed_side = "left",head_value = 15, base_value = 1.5,min_change = 0.01) {
flow_field.mat <- matrix(data = rep(0,rows*cols),nrow = rows, ncol = cols) #rep(rows*cols,0) #rnorm(rows*cols)
flow_field.mat[1,] <- rep(head_value,dim(flow_field.mat)[1]) # replacing top values of matrix
flow_field.mat[,dim(flow_field.mat)[2]] <- rep(head_value,dim(flow_field.mat)[2]) # replacing right hand side values of matrix w/higher water level
flow_field.mat[dim(flow_field.mat)[1],1] <- base_value # setting lower water level
message("Initial flow field state")
print(flow_field.mat) # show initial state
#write(flow_field.mat, stdout())
flow_fields.ls <- list()
flow_animate.df <- data.frame()
h_maps <- list()
k = 1
diff <- 10
while (diff > min_change) {
flow_old.mat <- flow_field.mat
for (j in 1:dim(flow_field.mat)[1]) { # rows
for (i in 1:dim(flow_field.mat)[1]) { # columns
if (i != 1 & i != dim(flow_field.mat)[2] & j != 1 & j != dim(flow_field.mat)[1]) { # not left or right columns or bottom or top columns
flow_field.mat[j,i] <- (flow_field.mat[j+1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1]+flow_field.mat[j-1,i])/4 # h1+h2+h3+h4  - interior nodes
} else if (j == dim(flow_field.mat)[1] & i != dim(flow_field.mat)[2] & i != 1) { # is bottom row, not last column or first column
flow_field.mat[j,i] <- (2*flow_field.mat[j-1,i]+flow_field.mat[j,i+1]+flow_field.mat[j,i-1])/4 # h1 + 2*h2 + h4
} else if (j == dim(flow_field.mat)[1] & i == dim(flow_field.mat)[2]) { # corner case (only 1 node)
#flow_field.mat[j,i] <- 3#(2*flow_field.mat[j,i-1]+2*flow_field.mat[j-1,i])/4 # 2*h1 + 2*h4
# this remains the same! As this is the impermeable right hand bound (represents water flow?)
} else if (i == 1 & j != 1 & j != dim(flow_field.mat)[1]) { # is left hand column, not first or bottom row
flow_field.mat[j,i] <- (flow_field.mat[j+1,i]+2*flow_field.mat[j,i+1]+flow_field.mat[j,j-1])/4 # h1 + 2*h2 + h4
}
}
}
#g <- ggplot(data = melt(flow_field.mat)) +
#  geom_tile(mapping = aes(x = Var1, y = Var2,fill = value))
#h_maps[[k]] <- g
diff <- sum(flow_field.mat) - sum(flow_old.mat)
k <- k + 1
flow_fields.ls[[k]] <- flow_field.mat
flow_stacked.df <- melt(flow_field.mat)
flow_stacked.df <- cbind(flow_stacked.df,rep(k,nrow(flow_stacked.df)))
flow_animate.df <- rbind(flow_animate.df,flow_stacked.df)
#print(flow_field.mat)
return(flow_animate.df)
}
}
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
devtools::install_github('thomasp85/gganimate')
devtools::install_github('thomasp85/gganimate')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
library("gganimate", lib.loc="H:/R/win-library/3.5")
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
remove.packages("gganimate")
install.packages("gganimate")
install.packages("gganimate")
shiny::runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
args(finite_diff.func)
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
args(finite_diff.func)
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
finite_diff.func(rows  = 15)
finite_diff.func(rows = 10,cols = 10)
finite_diff.func(rows = 10,cols = 15)
finite_diff.func(rows = 15,cols = 15)
finite_diff.func(rows = 15,cols = 20)
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
install.pakages("shinyalert")
install.packages("shinyalert")
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
function [result]=rep(array, count)
matrix = repmat(array, count,1);
result = matrix(:);
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
runApp('G:/My Drive/dev_working_folder/shiny_apps/finite_difference_app/finite_difference_flow')
rep
library(rsconnect)
rsconnect::setAccountInfo(name='mks29',
token='2B3E0D7FA92CCE82EBAB4891D4720E07',
secret='RZGWkhzCxgZX2K/Fy0nvor4Afuq2XHcWJd8++tsl')
setwd("G:/My Drive/dev_working_folder/shiny_apps/monte_carlo_demo_app")
getwd()
deployApp()
library(shiny) # framework
library(ggplot2) # for graphics
library(ggforce) # f
install.packages(ggforce)
install.packages("ggforce")
deployApp()
?deployApp
deployApp(account = "mks29")
deployApp(account = "mks29")
runApp()
runApp()
runApp()
runApp()
read.table("text.txt")
fread("text.txt")
library(data.table)
fread("text.txt")
delim("text.txt")
read.delim("text.txt")
print(read.delim("text.txt"))
print(read.delim("text.txt",stringsAsFactors = F))
description.char <- paste(
"Monte Carlo Open Day Demo App \n
by Matthew Skiffington \n
\n
This small Shiny application demonstrates a basic example of Monte Carlo Simulation.
Click \"start / continue\" to begin a loop.
Random data sets of increasing size will be generated, and an estimate of pi will be calculated from these, iteratively (as shown in the convergence plot).
A sense of what is happening is shown in the scatterplot on the left.
If you would like to estimate pi using more data points, please pause the loop, select the amount you like to generate using the slider, then click \"generate\".
For more than 5k points, the scatterplot is not rendered (it can take minutes, which is not ideal for a demonstration app).
The simulation may take a while as it is written using a loop (not vectorised) and even plotting a line chart can take a while.
The logic for this simulation comes courtesy from: \n> https://www.r-bloggers.com/estimation-of-the-number-pi-a-monte-carlo-simulation/\n
A copy of this original code can be accessed above. Each point is drawn from a -1,1 uniform random distribution, for X and Y.
The distance calculated is the euclidean (L2) distance, and the circle unit is the unit circle (the method would work identically with a quadrant - the ratios play out the same).
In reality, estimating Pi this way is tremendously slow and inefficient - other, more sophisticated methods are used in practice.
However, it nicely illustrates how a method involving random draws from a distribution can solve problems that might be difficult to solve using deterministic methods.
The most notable use case is probably in Markov chain Monte Carlo (MCMC).
It turns out writing plots straight to file (to raster, without trying to display a vectorised object) is a lot faster.
Additionally, R and ggplot2's default plotting shape for points is aliased, meaning for thousands (or millions) of points, switching to single pixel (pch='.') or small non-aliased circles (pch=16) significantly improves performance.
For more high performance (hundreds of millions), datashader in python seems to be good.
I've seen a post describing 2.6 billion points plotted in under 10s in Julia, using special techniques (memory mapping, saving data as a binary blob, multithreading, etc).
\n>https://hackernoon.com/drawing-2-7-billion-points-in-10s-ecc8c85ca8fa")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
deployApp(account = "mks29")
